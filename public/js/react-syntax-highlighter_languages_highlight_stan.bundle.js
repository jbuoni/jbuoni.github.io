(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["react-syntax-highlighter_languages_highlight_stan"],{

/***/ "./node_modules/highlight.js/lib/languages/stan.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/lib/languages/stan.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(hljs) {\n  // variable names cannot conflict with block identifiers\n  var BLOCKS = [\n    'functions',\n    'model',\n    'data',\n    'parameters',\n    'quantities',\n    'transformed',\n    'generated'\n  ];\n  var STATEMENTS = [\n    'for',\n    'in',\n    'if',\n    'else',\n    'while',\n    'break',\n    'continue',\n    'return'\n  ];\n  var SPECIAL_FUNCTIONS = [\n    'print',\n    'reject',\n    'increment_log_prob|10',\n    'integrate_ode|10',\n    'integrate_ode_rk45|10',\n    'integrate_ode_bdf|10',\n    'algebra_solver'\n  ];\n  var VAR_TYPES = [\n    'int',\n    'real',\n    'vector',\n    'ordered',\n    'positive_ordered',\n    'simplex',\n    'unit_vector',\n    'row_vector',\n    'matrix',\n    'cholesky_factor_corr|10',\n    'cholesky_factor_cov|10',\n    'corr_matrix|10',\n    'cov_matrix|10',\n    'void'\n  ];\n  var FUNCTIONS = [\n    'Phi', 'Phi_approx', 'abs', 'acos', 'acosh', 'algebra_solver', 'append_array',\n    'append_col', 'append_row', 'asin', 'asinh', 'atan', 'atan2', 'atanh',\n    'bernoulli_cdf', 'bernoulli_lccdf', 'bernoulli_lcdf', 'bernoulli_logit_lpmf',\n    'bernoulli_logit_rng', 'bernoulli_lpmf', 'bernoulli_rng', 'bessel_first_kind',\n    'bessel_second_kind', 'beta_binomial_cdf', 'beta_binomial_lccdf',\n    'beta_binomial_lcdf', 'beta_binomial_lpmf', 'beta_binomial_rng', 'beta_cdf',\n    'beta_lccdf', 'beta_lcdf', 'beta_lpdf', 'beta_rng', 'binary_log_loss',\n    'binomial_cdf', 'binomial_coefficient_log', 'binomial_lccdf', 'binomial_lcdf',\n    'binomial_logit_lpmf', 'binomial_lpmf', 'binomial_rng', 'block',\n    'categorical_logit_lpmf', 'categorical_logit_rng', 'categorical_lpmf',\n    'categorical_rng', 'cauchy_cdf', 'cauchy_lccdf', 'cauchy_lcdf', 'cauchy_lpdf',\n    'cauchy_rng', 'cbrt', 'ceil', 'chi_square_cdf', 'chi_square_lccdf',\n    'chi_square_lcdf', 'chi_square_lpdf', 'chi_square_rng', 'cholesky_decompose',\n    'choose', 'col', 'cols', 'columns_dot_product', 'columns_dot_self', 'cos',\n    'cosh', 'cov_exp_quad', 'crossprod', 'csr_extract_u', 'csr_extract_v',\n    'csr_extract_w', 'csr_matrix_times_vector', 'csr_to_dense_matrix',\n    'cumulative_sum', 'determinant', 'diag_matrix', 'diag_post_multiply',\n    'diag_pre_multiply', 'diagonal', 'digamma', 'dims', 'dirichlet_lpdf',\n    'dirichlet_rng', 'distance', 'dot_product', 'dot_self',\n    'double_exponential_cdf', 'double_exponential_lccdf', 'double_exponential_lcdf',\n    'double_exponential_lpdf', 'double_exponential_rng', 'e', 'eigenvalues_sym',\n    'eigenvectors_sym', 'erf', 'erfc', 'exp', 'exp2', 'exp_mod_normal_cdf',\n    'exp_mod_normal_lccdf', 'exp_mod_normal_lcdf', 'exp_mod_normal_lpdf',\n    'exp_mod_normal_rng', 'expm1', 'exponential_cdf', 'exponential_lccdf',\n    'exponential_lcdf', 'exponential_lpdf', 'exponential_rng', 'fabs',\n    'falling_factorial', 'fdim', 'floor', 'fma', 'fmax', 'fmin', 'fmod',\n    'frechet_cdf', 'frechet_lccdf', 'frechet_lcdf', 'frechet_lpdf', 'frechet_rng',\n    'gamma_cdf', 'gamma_lccdf', 'gamma_lcdf', 'gamma_lpdf', 'gamma_p', 'gamma_q',\n    'gamma_rng', 'gaussian_dlm_obs_lpdf', 'get_lp', 'gumbel_cdf', 'gumbel_lccdf',\n    'gumbel_lcdf', 'gumbel_lpdf', 'gumbel_rng', 'head', 'hypergeometric_lpmf',\n    'hypergeometric_rng', 'hypot', 'inc_beta', 'int_step', 'integrate_ode',\n    'integrate_ode_bdf', 'integrate_ode_rk45', 'inv', 'inv_Phi',\n    'inv_chi_square_cdf', 'inv_chi_square_lccdf', 'inv_chi_square_lcdf',\n    'inv_chi_square_lpdf', 'inv_chi_square_rng', 'inv_cloglog', 'inv_gamma_cdf',\n    'inv_gamma_lccdf', 'inv_gamma_lcdf', 'inv_gamma_lpdf', 'inv_gamma_rng',\n    'inv_logit', 'inv_sqrt', 'inv_square', 'inv_wishart_lpdf', 'inv_wishart_rng',\n    'inverse', 'inverse_spd', 'is_inf', 'is_nan', 'lbeta', 'lchoose', 'lgamma',\n    'lkj_corr_cholesky_lpdf', 'lkj_corr_cholesky_rng', 'lkj_corr_lpdf',\n    'lkj_corr_rng', 'lmgamma', 'lmultiply', 'log', 'log10', 'log1m', 'log1m_exp',\n    'log1m_inv_logit', 'log1p', 'log1p_exp', 'log2', 'log_determinant',\n    'log_diff_exp', 'log_falling_factorial', 'log_inv_logit', 'log_mix',\n    'log_rising_factorial', 'log_softmax', 'log_sum_exp', 'logistic_cdf',\n    'logistic_lccdf', 'logistic_lcdf', 'logistic_lpdf', 'logistic_rng', 'logit',\n    'lognormal_cdf', 'lognormal_lccdf', 'lognormal_lcdf', 'lognormal_lpdf',\n    'lognormal_rng', 'machine_precision', 'matrix_exp', 'max', 'mdivide_left_spd',\n    'mdivide_left_tri_low', 'mdivide_right_spd', 'mdivide_right_tri_low', 'mean',\n    'min', 'modified_bessel_first_kind', 'modified_bessel_second_kind',\n    'multi_gp_cholesky_lpdf', 'multi_gp_lpdf', 'multi_normal_cholesky_lpdf',\n    'multi_normal_cholesky_rng', 'multi_normal_lpdf', 'multi_normal_prec_lpdf',\n    'multi_normal_rng', 'multi_student_t_lpdf', 'multi_student_t_rng',\n    'multinomial_lpmf', 'multinomial_rng', 'multiply_log',\n    'multiply_lower_tri_self_transpose', 'neg_binomial_2_cdf',\n    'neg_binomial_2_lccdf', 'neg_binomial_2_lcdf', 'neg_binomial_2_log_lpmf',\n    'neg_binomial_2_log_rng', 'neg_binomial_2_lpmf', 'neg_binomial_2_rng',\n    'neg_binomial_cdf', 'neg_binomial_lccdf', 'neg_binomial_lcdf',\n    'neg_binomial_lpmf', 'neg_binomial_rng', 'negative_infinity', 'normal_cdf',\n    'normal_lccdf', 'normal_lcdf', 'normal_lpdf', 'normal_rng', 'not_a_number',\n    'num_elements', 'ordered_logistic_lpmf', 'ordered_logistic_rng', 'owens_t',\n    'pareto_cdf', 'pareto_lccdf', 'pareto_lcdf', 'pareto_lpdf', 'pareto_rng',\n    'pareto_type_2_cdf', 'pareto_type_2_lccdf', 'pareto_type_2_lcdf',\n    'pareto_type_2_lpdf', 'pareto_type_2_rng', 'pi', 'poisson_cdf', 'poisson_lccdf',\n    'poisson_lcdf', 'poisson_log_lpmf', 'poisson_log_rng', 'poisson_lpmf',\n    'poisson_rng', 'positive_infinity', 'pow', 'print', 'prod', 'qr_Q', 'qr_R',\n    'quad_form', 'quad_form_diag', 'quad_form_sym', 'rank', 'rayleigh_cdf',\n    'rayleigh_lccdf', 'rayleigh_lcdf', 'rayleigh_lpdf', 'rayleigh_rng', 'reject',\n    'rep_array', 'rep_matrix', 'rep_row_vector', 'rep_vector', 'rising_factorial',\n    'round', 'row', 'rows', 'rows_dot_product', 'rows_dot_self',\n    'scaled_inv_chi_square_cdf', 'scaled_inv_chi_square_lccdf',\n    'scaled_inv_chi_square_lcdf', 'scaled_inv_chi_square_lpdf',\n    'scaled_inv_chi_square_rng', 'sd', 'segment', 'sin', 'singular_values', 'sinh',\n    'size', 'skew_normal_cdf', 'skew_normal_lccdf', 'skew_normal_lcdf',\n    'skew_normal_lpdf', 'skew_normal_rng', 'softmax', 'sort_asc', 'sort_desc',\n    'sort_indices_asc', 'sort_indices_desc', 'sqrt', 'sqrt2', 'square',\n    'squared_distance', 'step', 'student_t_cdf', 'student_t_lccdf',\n    'student_t_lcdf', 'student_t_lpdf', 'student_t_rng', 'sub_col', 'sub_row',\n    'sum', 'tail', 'tan', 'tanh', 'target', 'tcrossprod', 'tgamma', 'to_array_1d',\n    'to_array_2d', 'to_matrix', 'to_row_vector', 'to_vector', 'trace',\n    'trace_gen_quad_form', 'trace_quad_form', 'trigamma', 'trunc', 'uniform_cdf',\n    'uniform_lccdf', 'uniform_lcdf', 'uniform_lpdf', 'uniform_rng', 'variance',\n    'von_mises_lpdf', 'von_mises_rng', 'weibull_cdf', 'weibull_lccdf',\n    'weibull_lcdf', 'weibull_lpdf', 'weibull_rng', 'wiener_lpdf', 'wishart_lpdf',\n    'wishart_rng'\n  ];\n  var DISTRIBUTIONS = [\n    'bernoulli', 'bernoulli_logit', 'beta', 'beta_binomial', 'binomial',\n    'binomial_logit', 'categorical', 'categorical_logit', 'cauchy', 'chi_square',\n    'dirichlet', 'double_exponential', 'exp_mod_normal', 'exponential', 'frechet',\n    'gamma', 'gaussian_dlm_obs', 'gumbel', 'hypergeometric', 'inv_chi_square',\n    'inv_gamma', 'inv_wishart', 'lkj_corr', 'lkj_corr_cholesky', 'logistic',\n    'lognormal', 'multi_gp', 'multi_gp_cholesky', 'multi_normal',\n    'multi_normal_cholesky', 'multi_normal_prec', 'multi_student_t', 'multinomial',\n    'neg_binomial', 'neg_binomial_2', 'neg_binomial_2_log', 'normal',\n    'ordered_logistic', 'pareto', 'pareto_type_2', 'poisson', 'poisson_log',\n    'rayleigh', 'scaled_inv_chi_square', 'skew_normal', 'student_t', 'uniform',\n    'von_mises', 'weibull', 'wiener', 'wishart'\n  ];\n\n  return {\n    aliases: ['stanfuncs'],\n    keywords: {\n      'title': BLOCKS.join(' '),\n      'keyword': STATEMENTS.concat(VAR_TYPES).concat(SPECIAL_FUNCTIONS).join(' '),\n      'built_in': FUNCTIONS.join(' ')\n    },\n    lexemes: hljs.IDENT_RE,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT(\n        /#/,\n        /$/,\n        {\n          relevance: 0,\n          keywords: {\n            'meta-keyword': 'include'\n          }\n        }\n      ),\n      hljs.COMMENT(\n        /\\/\\*/,\n        /\\*\\//,\n        {\n          relevance: 0,\n          // highlight doc strings mentioned in Stan reference\n          contains: [\n            {\n              className: 'doctag',\n              begin: /@(return|param)/\n            }\n          ]\n        }\n      ),\n      {\n        // hack: in range constraints, lower must follow \"<\"\n        begin: /<\\s*lower\\s*=/,\n        keywords: 'lower'\n      },\n      {\n        // hack: in range constraints, upper must follow either , or <\n        // <lower = ..., upper = ...> or <upper = ...>\n        begin: /[<,]*upper\\s*=/,\n        keywords: 'upper'\n      },\n      {\n        className: 'keyword',\n        begin: /\\btarget\\s*\\+=/,\n        relevance: 10\n      },\n      {\n        begin: '~\\\\s*(' + hljs.IDENT_RE + ')\\\\s*\\\\(',\n        keywords: DISTRIBUTIONS.join(' ')\n      },\n      {\n        className: 'number',\n        variants: [\n          {\n            begin: /\\b\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?/\n          },\n          {\n            begin: /\\.\\d+(?:[eE][+-]?\\d+)?\\b/\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'string',\n        begin: '\"',\n        end: '\"',\n        relevance: 0\n      }\n    ]\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/highlight.js/lib/languages/stan.js\n");

/***/ })

}]);